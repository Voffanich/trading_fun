#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Order Manager
"""

import os
import sys

def check_file_contains(file_path, search_strings):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
    if not os.path.exists(file_path):
        return False, f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        missing = []
        for search_str in search_strings:
            if search_str not in content:
                missing.append(search_str)
        
        if missing:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–æ–∫–∏: {missing}"
        return True, "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
    
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Order Manager...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è order_manager.py
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ order_manager.py:")
    order_manager_checks = [
        "entry_orders = [o for o in open_orders if (o.get(\"type\") == \"LIMIT\" and o.get(\"orderId\"))]",
        "prot_orders = [o for o in open_orders if (o.get(\"type\") in (\"STOP_MARKET\", \"TRAILING_STOP_MARKET\") and o.get(\"orderId\"))]",
        "cleanup_debug",
        "watch_and_cleanup_error"
    ]
    
    success, message = check_file_contains("order_manager.py", order_manager_checks)
    print(f"   {'‚úÖ' if success else '‚ùå'} {message}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è binance_connect.py
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ binance_connect.py:")
    binance_checks = [
        "if order_id is not None and order_id != 0:",
        "cancel_order skipped"
    ]
    
    success, message = check_file_contains("binance_connect.py", binance_checks)
    print(f"   {'‚úÖ' if success else '‚ùå'} {message}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è bot_5m_rm.py
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_5m_rm.py:")
    bot_checks = [
        "OrderManager cleanup: processing",
        "verbose=True"
    ]
    
    success, message = check_file_contains("bot_5m_rm.py", bot_checks)
    print(f"   {'‚úÖ' if success else '‚ùå'} {message}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
    if os.path.exists("ORDER_MANAGER_FIXES_APPLIED.md"):
        print("   ‚úÖ ORDER_MANAGER_FIXES_APPLIED.md –Ω–∞–π–¥–µ–Ω")
    else:
        print("   ‚ùå ORDER_MANAGER_FIXES_APPLIED.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n" + "=" * 60)
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úÖ, —Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    print("–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞!")

if __name__ == "__main__":
    main()